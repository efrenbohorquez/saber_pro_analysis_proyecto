"""
Aplicaci√≥n principal del dashboard en Streamlit para visualizar los resultados del an√°lisis de Saber Pro.
"""

# Importaciones b√°sicas
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from plotly.subplots import make_subplots
from scipy import stats
import os
import sys
from pathlib import Path
import joblib  # Para cargar modelos guardados

# Manejo de importaci√≥n de folium y streamlit_folium con fallback
FOLIUM_AVAILABLE = False
try:
    import folium
    from streamlit_folium import st_folium, folium_static
    FOLIUM_AVAILABLE = True
except ImportError as e:
    st.warning(f"üó∫Ô∏è Funcionalidades de mapas no disponibles: {e}")
    st.info("üí° Para habilitar mapas interactivos, instale: pip install folium streamlit-folium")
    # Definir funciones dummy para evitar errores
    def st_folium(*args, **kwargs):
        st.error("streamlit_folium no est√° disponible")
        return None
    def folium_static(*args, **kwargs):
        st.error("streamlit_folium no est√° disponible")
        return None

# Configuraci√≥n de la plantilla estilo The Economist
economist_template = go.layout.Template()

economist_template.layout = go.Layout(
    font_family="Arial, sans-serif",
    font_color="#2E2E2E",  # Gris oscuro para texto
    title_font_family="Georgia, serif", # Fuente con serifa para t√≠tulos
    title_font_color="#2E2E2E",
    title_x=0.01,  # T√≠tulo alineado a la izquierda
    title_y=0.95,
    title_yanchor='top',
    title_xanchor='left',
    title_pad_t=20, # M√°s espacio arriba del t√≠tulo
    title_pad_l=10,
    title_font_size=20,
    plot_bgcolor='white',
    paper_bgcolor='white',
    colorway=['#FF9999', '#757575', '#BDBDBD', '#2E2E2E', '#FFB6C1', '#87CEEB'], # Rojo Economist cambiado a pastel, grises, negro, rosa claro, azul claro
    xaxis=dict(
        showgrid=False,
        zeroline=False,
        linecolor='#757575',
        linewidth=1,
        ticks='outside',
        tickfont_color='#757575',
        title_font_color='#2E2E2E',
        title_standoff=15,
        automargin=True
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor='#E0E0E0', # Rejilla horizontal muy sutil
        zeroline=False,
        linecolor='#757575',
        linewidth=1,
        ticks='outside',
        tickfont_color='#757575',
        title_font_color='#2E2E2E',
        title_standoff=15,
        automargin=True
    ),
    legend_orientation="h",
    legend_yanchor="bottom",
    legend_y=1.01,
    legend_xanchor="left", # Leyenda a la izquierda debajo del t√≠tulo
    legend_x=0.01,
    legend_bgcolor='rgba(255,255,255,0.7)',
    legend_bordercolor='#CCCCCC',
    legend_borderwidth=0.5,
    legend_tracegroupgap=10,
    margin=dict(l=80, r=30, t=100, b=80) # Ajustar m√°rgenes (m√°s espacio para t√≠tulo y ejes)
)

# Registrar y establecer la plantilla como predeterminada
pio.templates['economist'] = economist_template
pio.templates.default = 'economist'

# Agregar el directorio ra√≠z al path para importar m√≥dulos del proyecto
sys.path.append(str(Path(__file__).resolve().parent.parent))

from src.config.constants import (
    PROCESSED_DATA_DIR,
    FIGURES_DIR,
    SOCIOECONOMIC_VARS,
    ACADEMIC_VARS,
    GEO_VARS,
    STRATA_COLORS
)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Dashboard An√°lisis Saber Pro",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n para cargar datos
@st.cache_data
def load_data():
    """Carga los datos procesados."""
    from src.config.constants import RAW_DATA_FILE
    
    try:
        df = pd.read_csv(RAW_DATA_FILE)
        st.success(f"Datos cargados exitosamente desde {RAW_DATA_FILE}")
        return df
    except FileNotFoundError:
        st.error(f"No se encontr√≥ el archivo de datos en la ruta especificada: {RAW_DATA_FILE}. Por favor, verifique la ruta.")
        return None
    except Exception as e:
        st.error(f"Ocurri√≥ un error al cargar los datos: {e}")
        return None

@st.cache_data
def load_pca_results():
    """Carga los resultados del an√°lisis PCA."""
    try:
        df = pd.read_csv(PROCESSED_DATA_DIR / "pca_academic_results.csv")
        return df
    except FileNotFoundError:
        return None

@st.cache_data
def load_mca_results():
    """Carga los resultados del an√°lisis MCA."""
    try:
        df = pd.read_csv(PROCESSED_DATA_DIR / "mca_socioeconomic_results.csv")
        return df
    except FileNotFoundError:
        return None

@st.cache_data
def load_clustering_results():
    """Carga los resultados del clustering."""
    try:
        df = pd.read_csv(PROCESSED_DATA_DIR / "clustering_results.csv")
        return df
    except FileNotFoundError:
        return None

@st.cache_data
def load_department_stats():
    """Carga las estad√≠sticas por departamento."""
    try:
        df = pd.read_csv(PROCESSED_DATA_DIR / "department_stats.csv")
        return df
    except FileNotFoundError:
        return None

@st.cache_data
def load_model_comparison():
    """Carga la comparaci√≥n de modelos predictivos."""
    try:
        df = pd.read_csv(PROCESSED_DATA_DIR / "model_comparison.csv")
        return df
    except FileNotFoundError:
        return None

# Funci√≥n para mostrar el encabezado
def show_header():
    """Muestra el encabezado del dashboard."""
    st.title("üìä Dashboard An√°lisis Saber Pro")
    st.markdown("""
    Este dashboard presenta un an√°lisis multivariado de la relaci√≥n entre el nivel socioecon√≥mico y el rendimiento acad√©mico
    en las pruebas Saber Pro en Colombia, utilizando t√©cnicas estad√≠sticas avanzadas.
    """)
    st.markdown("---")

# Funci√≥n para la p√°gina de inicio
def show_home():
    """Muestra la p√°gina de inicio del dashboard."""
    st.header("üè† Inicio")

    # Mostrar la imagen del banner
    banner_path = Path(__file__).parent / "assets" / "484798221_1031777162319148_3372633552707418771_n.jpg"
    if banner_path.exists():
        st.image(str(banner_path), use_container_width=True) # Corregido aqu√≠
    else:
        st.warning(f"No se encontr√≥ la imagen del banner en {banner_path}")
    
    st.markdown("""
    ## An√°lisis Multivariante: Relaci√≥n entre Nivel Socioecon√≥mico y Rendimiento Acad√©mico en las Pruebas Saber Pro
    
    Este proyecto realiza un an√°lisis estad√≠stico exhaustivo de la relaci√≥n entre el nivel socioecon√≥mico (NSE) y el rendimiento acad√©mico (RA) 
    de los estudiantes que presentaron las Pruebas Saber Pro en Colombia, utilizando datos oficiales del ICFES y aplicando t√©cnicas multivariantes avanzadas.
    
    ### Objetivos del An√°lisis
    
    1. **Describir** las caracter√≠sticas socioecon√≥micas y de rendimiento acad√©mico de la poblaci√≥n estudiantil evaluada.
    2. **Reducir** la dimensionalidad de las variables mediante An√°lisis de Componentes Principales (ACP) y An√°lisis Factorial (AF).
    3. **Visualizar** las asociaciones entre variables socioecon√≥micas y rendimiento acad√©mico con An√°lisis de Correspondencias M√∫ltiples (ACM).
    4. **Identificar** perfiles de estudiantes mediante An√°lisis de Cl√∫ster Jer√°rquico.
    5. **Explorar** la capacidad predictiva de las variables socioecon√≥micas sobre el rendimiento acad√©mico.
    6. **Analizar** la distribuci√≥n geogr√°fica de los resultados por estrato y ubicaci√≥n.
    
    ### Navegaci√≥n del Dashboard
    
    Utilice el men√∫ lateral para explorar las diferentes secciones del an√°lisis:
    
    - **Exploraci√≥n de Datos**: Visualizaci√≥n descriptiva de las variables principales.
    - **An√°lisis de Componentes Principales**: Reducci√≥n de dimensionalidad de variables acad√©micas.
    - **An√°lisis de Correspondencias M√∫ltiples**: Asociaciones entre variables categ√≥ricas.
    - **Clustering Jer√°rquico**: Identificaci√≥n de perfiles de estudiantes.
    - **Modelos Predictivos**: Predicci√≥n del rendimiento acad√©mico.
    - **An√°lisis Geoespacial**: Distribuci√≥n geogr√°fica de resultados.
    """)
    
    # Mostrar algunas estad√≠sticas generales si los datos est√°n disponibles
    df = load_data()
    if df is not None:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Estudiantes", f"{len(df):,}")
        
        with col2:
            if 'FAMI_ESTRATOVIVIENDA' in df.columns:
                strata_counts = df['FAMI_ESTRATOVIVIENDA'].value_counts()
                most_common_strata = strata_counts.index[0]
                st.metric("Estrato m√°s com√∫n", most_common_strata)
        
        with col3:
            if 'MOD_RAZONA_CUANTITAT_PUNT' in df.columns:
                avg_score = df['MOD_RAZONA_CUANTITAT_PUNT'].mean()
                st.metric("Puntaje Promedio Razonamiento", f"{avg_score:.1f}")
        
        with col4:
            if 'ESTU_DEPTO_RESIDE' in df.columns:
                dept_counts = df['ESTU_DEPTO_RESIDE'].value_counts()
                most_common_dept = dept_counts.index[0]
                st.metric("Departamento con m√°s estudiantes", most_common_dept)

# Funci√≥n para la p√°gina de exploraci√≥n de datos
def show_eda():
    """Muestra la p√°gina de exploraci√≥n de datos."""
    st.header("üîç Exploraci√≥n de Datos")
    
    df = load_data()
    if df is None:
        st.warning("No se encontraron datos para mostrar.")
        return
    
    # Pesta√±as para diferentes aspectos del EDA
    tab1, tab2, tab3, tab4 = st.tabs(["Variables Acad√©micas", "Variables Socioecon√≥micas", "Distribuciones", "Correlaciones"])
    
    with tab1:
        st.subheader("An√°lisis de Variables Acad√©micas")
        
        # Seleccionar variable acad√©mica
        academic_vars = [col for col in df.columns if 'MOD_' in col and 'PUNT' in col]
        if academic_vars:
            selected_var = st.selectbox("Seleccione una variable acad√©mica:", academic_vars)
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Histograma
                fig = px.histogram(
                    df, 
                    x=selected_var,
                    title=f"Distribuci√≥n de {selected_var}",
                    color_discrete_sequence=['#1f77b4'],
                    marginal="box"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Estad√≠sticas descriptivas
                stats = df[selected_var].describe()
                st.write("Estad√≠sticas descriptivas:")
                st.dataframe(stats)
                
                # Boxplot por g√©nero si est√° disponible
                if 'ESTU_GENERO' in df.columns:
                    fig = px.box(
                        df, 
                        x="ESTU_GENERO", 
                        y=selected_var,
                        title=f"{selected_var} por G√©nero",
                        color="ESTU_GENERO"
                    )
                    st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("An√°lisis de Variables Socioecon√≥micas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribuci√≥n de estratos
            if 'FAMI_ESTRATOVIVIENDA' in df.columns:
                fig = px.pie(
                    df, 
                    names='FAMI_ESTRATOVIVIENDA',
                    title="Distribuci√≥n por Estrato Socioecon√≥mico",
                    color='FAMI_ESTRATOVIVIENDA',
                    color_discrete_map=STRATA_COLORS
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Nivel educativo de los padres
            if 'FAMI_EDUCACIONPADRE' in df.columns and 'FAMI_EDUCACIONMADRE' in df.columns:
                # Seleccionar padre o madre
                parent = st.radio("Seleccione:", ["Padre", "Madre"])
                
                if parent == "Padre":
                    edu_col = 'FAMI_EDUCACIONPADRE'
                    title = "Nivel Educativo del Padre"
                else:
                    edu_col = 'FAMI_EDUCACIONMADRE'
                    title = "Nivel Educativo de la Madre"
                
                # Contar y ordenar
                edu_counts = df[edu_col].value_counts().reset_index()
                edu_counts.columns = [edu_col, 'Cantidad']
                
                fig = px.bar(
                    edu_counts,
                    x=edu_col,
                    y='Cantidad',
                    title=title,
                    color_discrete_sequence=['#2ca02c']
                )
                fig.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Nuevas visualizaciones socioecon√≥micas

            st.subheader("Horas de Trabajo Semanales")
            if 'ESTU_HORASSEMANATRABAJA_NUM' in df.columns:
                fig_horas_trabajo = px.histogram(
                    df, 
                    x='ESTU_HORASSEMANATRABAJA_NUM',
                    title="Distribuci√≥n de Horas de Trabajo Semanales",
                    marginal="box"
                )
                st.plotly_chart(fig_horas_trabajo, use_container_width=True, key="horas_trabajo_hist")
            else:
                st.markdown("_Variable 'ESTU_HORASSEMANATRABAJA_NUM' no encontrada._")

            st.subheader("Valor de Matr√≠cula Universitaria")
            if 'ESTU_VALORMATRICULAUNIVERSIDAD' in df.columns:
                # Podr√≠a ser √∫til transformar esta variable (e.g. log) si est√° muy sesgada
                # o manejar valores no num√©ricos si existen.
                # Por ahora, un histograma directo asumiendo que es num√©rica.
                df_matricula = df[pd.to_numeric(df['ESTU_VALORMATRICULAUNIVERSIDAD'], errors='coerce').notna()]
                fig_valor_matricula = px.histogram(
                    df_matricula, 
                    x='ESTU_VALORMATRICULAUNIVERSIDAD',
                    title="Distribuci√≥n del Valor de Matr√≠cula Universitaria",
                    marginal="box"
                )
                st.plotly_chart(fig_valor_matricula, use_container_width=True, key="valor_matricula_hist")
            else:
                st.markdown("_Variable 'ESTU_VALORMATRICULAUNIVERSIDAD' no encontrada._")

            st.subheader("Fuentes de Pago de Matr√≠cula")
            payment_vars = [
                'ESTU_PAGOMATRICULABECA',
                'ESTU_PAGOMATRICULACREDITO',
                'ESTU_PAGOMATRICULAPADRES',
                'ESTU_PAGOMATRICULAPROPIO'
            ]
            existing_payment_vars = [var for var in payment_vars if var in df.columns]

            if existing_payment_vars:
                payment_data = pd.melt(
                    df[existing_payment_vars],
                    var_name='Fuente de Pago',
                    value_name='Respuesta'
                )
                

                payment_names = {
                    'ESTU_PAGOMATRICULABECA': 'Beca',
                    'ESTU_PAGOMATRICULACREDITO': 'Cr√©dito',
                    'ESTU_PAGOMATRICULAPADRES': 'Padres/Familiares',
                    'ESTU_PAGOMATRICULAPROPIO': 'Recursos Propios'
                }
                payment_data['Fuente de Pago'] = payment_data['Fuente de Pago'].map(payment_names)
                
                # Contar respuestas (asumiendo que son categ√≥ricas, e.g., 'Si', 'No', o niveles)
                # Si son booleanas o 'Si'/'No', podr√≠amos filtrar por 'Si'
                # Por ahora, mostramos todas las respuestas encontradas por fuente
                payment_counts = payment_data.groupby(['Fuente de Pago', 'Respuesta']).size().reset_index(name='Cantidad')
                
                fig_payment = px.bar(
                    payment_counts,
                    x='Fuente de Pago',
                    y='Cantidad',
                    color='Respuesta',
                    title="Fuentes de Pago de Matr√≠cula",
                    barmode='group'
                )
                st.plotly_chart(fig_payment, use_container_width=True, key="fuentes_pago_bar")
            else:
                st.markdown("_No se encontraron variables sobre fuentes de pago de matr√≠cula._")
    
    with tab3:
        st.subheader("Distribuciones")
        
        # Seleccionar variable para distribuci√≥n
        all_numeric = df.select_dtypes(include=['number']).columns.tolist()
        selected_var = st.selectbox("Seleccione una variable para visualizar su distribuci√≥n:", all_numeric)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma con KDE
            fig = px.histogram(
                df, 
                x=selected_var,
                title=f"Distribuci√≥n de {selected_var}",
                color_discrete_sequence=['#1f77b4'],
                marginal="box"
            )
            st.plotly_chart(fig, use_container_width=True, key=f"dist_hist_{selected_var}")
        
        with col2:
            # QQ Plot para normalidad
            from scipy import stats
            
            fig = px.scatter(
                x=np.sort(stats.norm.ppf(np.linspace(0.01, 0.99, len(df)))),
                y=np.sort(df[selected_var].dropna()),
                title=f"QQ Plot de {selected_var}",
                labels={"x": "Cuantiles te√≥ricos", "y": "Cuantiles observados"}
            )
            st.plotly_chart(fig, use_container_width=True, key=f"dist_qq_{selected_var}")
        
        # Prueba de Shapiro-Wilk para normalidad
        st.subheader("Prueba de Normalidad")
        
        if selected_var in df.columns:
            from scipy.stats import shapiro
            
            # Realizar prueba de Shapiro-Wilk
            stat, p_value = shapiro(df[selected_var].dropna())
            
            # Mostrar resultados
            st.write(f"Estad√≠stico de prueba: {stat:.4f}")
            st.write(f"Valor p: {p_value:.4f}")
            
            # Interpretar resultados
            alpha = 0.05
            if p_value > alpha:
                st.success("No se rechaza la hip√≥tesis nula: los datos siguen una distribuci√≥n normal.")
            else:
                st.error("Se rechaza la hip√≥tesis nula: los datos no siguen una distribuci√≥n normal.")
    
    with tab4:
        st.subheader("Correlaciones")
        
        # Seleccionar variables para matriz de correlaci√≥n
        numeric_vars = df.select_dtypes(include=['number']).columns.tolist()
        
        # Filtrar solo variables acad√©micas y socioecon√≥micas num√©ricas
        academic_vars = [var for var in numeric_vars if 'MOD_' in var and 'PUNT' in var]
        socioeconomic_vars = [var for var in numeric_vars if var in ['NSE_SCORE', 'ESTRATO_NUM', 'FAMI_EDUCACIONPADRE_NIVEL', 'FAMI_EDUCACIONMADRE_NIVEL']]
        
        # Combinar y eliminar duplicados
        corr_vars = list(set(academic_vars + socioeconomic_vars))
        
        if len(corr_vars) > 1:
            # Calcular matriz de correlaci√≥n
            corr_matrix = df[corr_vars].corr()
            
            # Crear mapa de calor con Plotly
            fig = px.imshow(
                corr_matrix,
                text_auto=True,
                aspect="auto",
                color_continuous_scale='RdBu_r',
                title="Matriz de Correlaci√≥n"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Mostrar correlaciones espec√≠ficas con rendimiento acad√©mico
            st.subheader("Correlaciones con Rendimiento Acad√©mico")
            
            # Seleccionar variable de rendimiento
            target_var = st.selectbox("Seleccione una variable de rendimiento:", academic_vars)
            
            # Calcular correlaciones con la variable objetivo
            correlations = df[corr_vars].corr()[target_var].sort_values(ascending=False)
            correlations = correlations.drop(target_var)  # Eliminar autocorrelaci√≥n
            
            # Mostrar como gr√°fico de barras
            fig = px.bar(
                x=correlations.index,
                y=correlations.values,
                title=f"Correlaciones con {target_var}",
                labels={"x": "Variable", "y": "Coeficiente de correlaci√≥n"},
                color=correlations.values,
                color_continuous_scale='RdBu_r'
            )
            st.plotly_chart(fig, use_container_width=True)

# Funci√≥n para la p√°gina de PCA
def show_pca():
    """Muestra la p√°gina de an√°lisis de componentes principales."""
    st.header("üß© An√°lisis de Componentes Principales")
    
    df_pca = load_pca_results()
    if df_pca is None:
        st.warning("No se encontraron resultados de PCA. Por favor ejecute primero el an√°lisis completo.")
        return
    
    # Pesta√±as para diferentes aspectos del PCA
    tab1, tab2, tab3 = st.tabs(["Varianza Explicada", "Biplot", "Proyecci√≥n de Datos"])
    
    with tab1:
        st.subheader("Varianza Explicada por Componentes")
        
        # Mostrar gr√°fico de sedimentaci√≥n
        scree_path = FIGURES_DIR / 'pca_academic_scree.png'
        if os.path.exists(scree_path):
            st.image(str(scree_path), caption="Gr√°fico de Sedimentaci√≥n (Scree Plot)")
        else:
            st.error("No se encontr√≥ el gr√°fico de sedimentaci√≥n.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El gr√°fico de sedimentaci√≥n muestra la proporci√≥n de varianza explicada por cada componente principal.
        - La l√≠nea azul representa la varianza explicada por cada componente individual.
        - La l√≠nea naranja muestra la varianza acumulada.
        - La l√≠nea roja punteada indica el umbral del 80% de varianza explicada.
        
        Este gr√°fico ayuda a determinar cu√°ntos componentes retener para el an√°lisis.
        """)
    
    with tab2:
        st.subheader("Biplot: Relaci√≥n entre Variables y Componentes")
        
        # Mostrar biplot
        biplot_path = FIGURES_DIR / 'pca_academic_biplot.png'
        if os.path.exists(biplot_path):
            st.image(str(biplot_path), caption="Biplot de PCA")
        else:
            st.error("No se encontr√≥ el biplot.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El biplot muestra simult√°neamente:
        - La proyecci√≥n de las observaciones (estudiantes) en el espacio de los dos primeros componentes principales.
        - Los vectores que representan las variables originales en este espacio.
        
        Puntos clave para la interpretaci√≥n:
        - La direcci√≥n de los vectores indica qu√© variables contribuyen m√°s a cada componente.
        - Vectores que apuntan en direcciones similares indican variables correlacionadas positivamente.
        - Vectores que apuntan en direcciones opuestas indican variables correlacionadas negativamente.
        - La longitud de los vectores indica la importancia de la variable en los componentes mostrados.
        """)
        
        # Mostrar mapa de calor de cargas
        loadings_path = FIGURES_DIR / 'pca_academic_loadings.png'
        if os.path.exists(loadings_path):
            st.image(str(loadings_path), caption="Mapa de Calor de Cargas Factoriales")
        else:
            st.error("No se encontr√≥ el mapa de calor de cargas factoriales.")
    
    with tab3:
        st.subheader("Proyecci√≥n de Datos en Componentes Principales")
        
        # Verificar si existen columnas de PCA
        pca_cols = [col for col in df_pca.columns if col.startswith('PCA_ACADEMIC_')]
        
        if pca_cols and len(pca_cols) >= 2:
            # Seleccionar variables para colorear
            color_options = ['FAMI_ESTRATOVIVIENDA', 'NSE_NIVEL', 'RA_NIVEL', 'ESTU_GENERO', 'CLUSTER']
            color_options = [opt for opt in color_options if opt in df_pca.columns]
            
            if color_options:
                color_var = st.selectbox("Colorear por:", color_options)
                
                # Crear scatter plot interactivo
                fig = px.scatter(
                    df_pca,
                    x=pca_cols[0],
                    y=pca_cols[1],
                    color=color_var,
                    title=f"Proyecci√≥n de Datos en Componentes Principales (coloreado por {color_var})",
                    labels={
                        pca_cols[0]: "Componente Principal 1",
                        pca_cols[1]: "Componente Principal 2"
                    },
                    opacity=0.7
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # A√±adir selector para componentes 3D si hay suficientes componentes
                if len(pca_cols) >= 3:
                    st.subheader("Visualizaci√≥n 3D")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        x_comp = st.selectbox("Componente X:", pca_cols, index=0)
                    
                    with col2:
                        y_comp = st.selectbox("Componente Y:", pca_cols, index=1)
                    
                    with col3:
                        z_comp = st.selectbox("Componente Z:", pca_cols, index=2)
                    
                    # Crear scatter plot 3D
                    fig = px.scatter_3d(
                        df_pca,
                        x=x_comp,
                        y=y_comp,
                        z=z_comp,
                        color=color_var,
                        title=f"Proyecci√≥n 3D (coloreado por {color_var})",
                        opacity=0.7
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("No se encontraron variables categ√≥ricas para colorear el gr√°fico.")
        else:
            st.error("No se encontraron columnas de PCA en los datos.")

# Funci√≥n para la p√°gina de MCA
def show_mca():
    """Muestra la p√°gina de an√°lisis de correspondencias m√∫ltiples."""
    st.header("üîÑ An√°lisis de Correspondencias M√∫ltiples")
    
    df_mca = load_mca_results()
    if df_mca is None:
        st.warning("No se encontraron resultados de MCA. Por favor ejecute primero el an√°lisis completo.")
        return
    
    # Pesta√±as para diferentes aspectos del MCA
    tab1, tab2, tab3 = st.tabs(["Inercia Explicada", "Mapa Factorial", "Proyecci√≥n de Individuos"])
    
    with tab1:
        st.subheader("Inercia Explicada por Dimensiones")
        
        # Mostrar gr√°fico de sedimentaci√≥n
        scree_path = FIGURES_DIR / 'mca_socioeconomic_scree.png'
        if os.path.exists(scree_path):
            st.image(str(scree_path), caption="Gr√°fico de Sedimentaci√≥n (Scree Plot) - MCA")
        else:
            st.error("No se encontr√≥ el gr√°fico de sedimentaci√≥n para MCA.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El gr√°fico de sedimentaci√≥n muestra la proporci√≥n de inercia (varianza) explicada por cada dimensi√≥n del ACM.
        - La l√≠nea azul representa la inercia explicada por cada dimensi√≥n individual.
        - La l√≠nea naranja muestra la inercia acumulada.
        
        A diferencia del ACP, en el ACM es com√∫n que se necesiten m√°s dimensiones para explicar una proporci√≥n significativa de la inercia total.
        """)
    
    with tab2:
        st.subheader("Mapa Factorial: Relaci√≥n entre Categor√≠as")
        
        # Mostrar mapa factorial
        factor_map_path = FIGURES_DIR / 'mca_socioeconomic_factor_map.png'
        if os.path.exists(factor_map_path):
            st.image(str(factor_map_path), caption="Mapa Factorial de Categor√≠as - ACM")
        else:
            st.error("No se encontr√≥ el mapa factorial.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El mapa factorial muestra la posici√≥n de las categor√≠as de las variables en el espacio de las dos primeras dimensiones del ACM.
        
        Puntos clave para la interpretaci√≥n:
        - Categor√≠as cercanas en el mapa tienden a aparecer juntas en los mismos individuos.
        - Categor√≠as alejadas del origen contribuyen m√°s a la definici√≥n de las dimensiones.
        - La proximidad entre categor√≠as de diferentes variables sugiere asociaci√≥n entre ellas.
        - La distribuci√≥n de las categor√≠as a lo largo de los ejes ayuda a interpretar el significado de cada dimensi√≥n.
        """)
    
    with tab3:
        st.subheader("Proyecci√≥n de Individuos")
        
        # Verificar si existen columnas de MCA
        mca_cols = [col for col in df_mca.columns if col.startswith('MCA_SOCIOECONOMIC_')]
        
        if mca_cols and len(mca_cols) >= 2:
            # Seleccionar variables para colorear
            color_options = ['FAMI_ESTRATOVIVIENDA', 'NSE_NIVEL', 'RA_NIVEL', 'ESTU_GENERO', 'CLUSTER']
            color_options = [opt for opt in color_options if opt in df_mca.columns]
            
            if color_options:
                color_var = st.selectbox("Colorear por:", color_options, key="mca_color")
                
                # Crear scatter plot interactivo
                fig = px.scatter(
                    df_mca,
                    x=mca_cols[0],
                    y=mca_cols[1],
                    color=color_var,
                    title=f"Proyecci√≥n de Individuos en ACM (coloreado por {color_var})",
                    labels={
                        mca_cols[0]: "Dimensi√≥n 1",
                        mca_cols[1]: "Dimensi√≥n 2"
                    },
                    opacity=0.7
                )
                
                # A√±adir l√≠neas de referencia
                fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
                fig.add_vline(x=0, line_dash="dash", line_color="gray", opacity=0.5)
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Mostrar im√°genes espec√≠ficas por estrato y rendimiento acad√©mico
                st.subheader("Visualizaciones Espec√≠ficas")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # Individuos por estrato
                    strata_path = FIGURES_DIR / 'mca_socioeconomic_individuals_by_strata.png'
                    if os.path.exists(strata_path):
                        st.image(str(strata_path), caption="Individuos por Estrato")
                    else:
                        st.error("No se encontr√≥ la visualizaci√≥n por estrato.")
                
                with col2:
                    # Individuos por rendimiento acad√©mico
                    ra_path = FIGURES_DIR / 'mca_socioeconomic_individuals_by_ra.png'
                    if os.path.exists(ra_path):
                        st.image(str(ra_path), caption="Individuos por Rendimiento Acad√©mico")
                    else:
                        st.error("No se encontr√≥ la visualizaci√≥n por rendimiento acad√©mico.")
            else:
                st.warning("No se encontraron variables categ√≥ricas para colorear el gr√°fico.")
        else:
            st.error("No se encontraron columnas de MCA en los datos.")

# Funci√≥n para la p√°gina de clustering
def show_clustering():
    """Muestra la p√°gina de clustering jer√°rquico."""
    st.header("üî¨ Clustering Jer√°rquico")
    
    df_cluster = load_clustering_results()
    if df_cluster is None:
        st.warning("No se encontraron resultados de clustering. Por favor ejecute primero el an√°lisis completo.")
        return
    
    # Pesta√±as para diferentes aspectos del clustering
    tab1, tab2, tab3 = st.tabs(["Dendrograma y Validaci√≥n", "Perfiles de Clusters", "Distribuci√≥n por Variables"])
    
    with tab1:
        st.subheader("Dendrograma y Validaci√≥n de Clusters")
        
        # Mostrar dendrograma
        dendrogram_path = FIGURES_DIR / 'cluster_dendrogram.png'
        if os.path.exists(dendrogram_path):
            st.image(str(dendrogram_path), caption="Dendrograma de Clustering Jer√°rquico")
        else:
            st.error("No se encontr√≥ el dendrograma.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El dendrograma muestra la estructura jer√°rquica de los clusters:
        - El eje vertical representa la distancia o disimilitud entre clusters.
        - Las l√≠neas horizontales representan fusiones de clusters.
        - La altura de las l√≠neas horizontales indica la distancia a la que se fusionan los clusters.
        - Cortar el dendrograma a diferentes alturas produce diferentes n√∫meros de clusters.
        """)
        
        # Mostrar gr√°fico de puntuaciones de silueta
        silhouette_path = FIGURES_DIR / 'cluster_silhouette_scores.png'
        if os.path.exists(silhouette_path):
            st.image(str(silhouette_path), caption="Puntuaciones de Silueta para Diferentes N√∫meros de Clusters")
        else:
            st.error("No se encontr√≥ el gr√°fico de puntuaciones de silueta.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El gr√°fico de puntuaciones de silueta ayuda a determinar el n√∫mero √≥ptimo de clusters:
        - El eje horizontal representa diferentes n√∫meros de clusters.
        - El eje vertical muestra la puntuaci√≥n de silueta promedio para cada n√∫mero de clusters.
        - Una mayor puntuaci√≥n de silueta indica una mejor calidad de clustering.
        - La l√≠nea vertical punteada indica el n√∫mero √≥ptimo de clusters seg√∫n este criterio.
        """)
    
    with tab2:
        st.subheader("Perfiles de Clusters")
        
        # Mostrar perfiles de clusters
        profiles_path = FIGURES_DIR / 'cluster_profiles.png'
        if os.path.exists(profiles_path):
            st.image(str(profiles_path), caption="Perfiles de Clusters")
        else:
            st.error("No se encontr√≥ el gr√°fico de perfiles de clusters.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El gr√°fico de perfiles muestra las caracter√≠sticas promedio de cada cluster:
        - Cada l√≠nea representa un cluster.
        - El eje horizontal representa diferentes variables.
        - El eje vertical muestra los valores estandarizados de cada variable.
        - Valores positivos indican que el cluster tiene valores por encima de la media en esa variable.
        - Valores negativos indican que el cluster tiene valores por debajo de la media en esa variable.
        
        Este gr√°fico ayuda a interpretar qu√© caracter√≠sticas definen a cada cluster.
        """)
        
        # Mostrar estad√≠sticas por cluster si la columna CLUSTER existe
        if 'CLUSTER' in df_cluster.columns:
            st.subheader("Estad√≠sticas por Cluster")
            
            # Seleccionar variables para mostrar estad√≠sticas
            numeric_vars = df_cluster.select_dtypes(include=['number']).columns.tolist()
            academic_vars = [var for var in numeric_vars if 'MOD_' in var and 'PUNT' in var]
            socioeconomic_vars = [var for var in numeric_vars if var in ['NSE_SCORE', 'ESTRATO_NUM', 'FAMI_EDUCACIONPADRE_NIVEL', 'FAMI_EDUCACIONMADRE_NIVEL']]
            
            # Combinar y eliminar duplicados
            selected_vars = list(set(academic_vars + socioeconomic_vars))
            
            if selected_vars:
                # Calcular estad√≠sticas por cluster
                cluster_stats = df_cluster.groupby('CLUSTER')[selected_vars].mean()
                
                # Mostrar como tabla
                st.write("Valores promedio por cluster:")
                st.dataframe(cluster_stats)
                
                # Mostrar como gr√°fico de radar
                # Preparar datos para gr√°fico de radar
                fig = go.Figure()
                
                for cluster in cluster_stats.index:
                    fig.add_trace(go.Scatterpolar(
                        r=cluster_stats.loc[cluster].values,
                        theta=cluster_stats.columns,
                        fill='toself',
                        name=f'Cluster {cluster}'
                    ))
                
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                        )
                    ),
                    title="Perfiles de Clusters (Gr√°fico de Radar)",
                    showlegend=True
                )
                
                st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        st.subheader("Distribuci√≥n por Variables")
        
        # Mostrar distribuci√≥n por estrato
        strata_dist_path = FIGURES_DIR / 'cluster_distribution_by_strata.png'
        if os.path.exists(strata_dist_path):
            st.image(strata_dist_path, caption="Distribuci√≥n de Clusters por Estrato")
        else:
            st.error("No se encontr√≥ el gr√°fico de distribuci√≥n por estrato.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El gr√°fico de distribuci√≥n muestra c√≥mo se distribuyen los clusters en diferentes estratos:
        - El eje horizontal representa los diferentes estratos.
        - El eje vertical muestra el porcentaje de cada cluster dentro de cada estrato.
        - Las barras apiladas representan la proporci√≥n de cada cluster en cada estrato.
        
        Este gr√°fico ayuda a entender si ciertos clusters est√°n m√°s asociados con determinados estratos socioecon√≥micos.
        """)
        
        # Visualizaci√≥n interactiva de clusters en el espacio de PCA o MCA
        st.subheader("Visualizaci√≥n de Clusters en Espacio Reducido")
        
        # Verificar si existen columnas de PCA o MCA
        pca_cols = [col for col in df_cluster.columns if col.startswith('PCA_ACADEMIC_')]
        mca_cols = [col for col in df_cluster.columns if col.startswith('MCA_SOCIOECONOMIC_')]
        
        if 'CLUSTER' in df_cluster.columns:
            if pca_cols and len(pca_cols) >= 2:
                st.subheader("Visualizaci√≥n de Clusters en Espacio PCA")
                
                # Crear scatter plot interactivo
                fig = px.scatter(
                    df_cluster,
                    x=pca_cols[0],
                    y=pca_cols[1],
                    color='CLUSTER',
                    title="Clusters en Espacio PCA",
                    labels={
                        pca_cols[0]: "Componente Principal 1",
                        pca_cols[1]: "Componente Principal 2"
                    },
                    opacity=0.7,
                    category_orders={"CLUSTER": sorted(df_cluster['CLUSTER'].unique())}
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            if mca_cols and len(mca_cols) >= 2:
                st.subheader("Visualizaci√≥n de Clusters en Espacio MCA")
                
                # Crear scatter plot interactivo
                fig = px.scatter(
                    df_cluster,
                    x=mca_cols[0],
                    y=mca_cols[1],
                    color='CLUSTER',
                    title="Clusters en Espacio MCA",
                    labels={
                        mca_cols[0]: "Dimensi√≥n 1",
                        mca_cols[1]: "Dimensi√≥n 2"
                    },
                    opacity=0.7,
                    category_orders={"CLUSTER": sorted(df_cluster['CLUSTER'].unique())}
                )
                
                st.plotly_chart(fig, use_container_width=True)

# Funci√≥n para la p√°gina de modelos predictivos
def show_predictive_models():
    """Muestra la p√°gina de modelos predictivos."""
    st.header("üìà Modelos Predictivos")
    
    df = load_data()
    model_comparison = load_model_comparison()
    
    if df is None or model_comparison is None:
        st.warning("No se encontraron resultados de modelos predictivos. Por favor ejecute primero el an√°lisis completo.")
        return
    
    # Pesta√±as para diferentes aspectos de los modelos predictivos
    tab1, tab2, tab3 = st.tabs(["Comparaci√≥n de Modelos", "Importancia de Variables", "Predicciones vs. Reales"])
    
    with tab1:
        st.subheader("Comparaci√≥n de Modelos")
        
        # Mostrar comparaci√≥n de modelos
        comparison_path = FIGURES_DIR / 'model_comparison.png'
        if os.path.exists(comparison_path):
            st.image(str(comparison_path), caption="Comparaci√≥n de Modelos Predictivos")
        else:
            st.error("No se encontr√≥ el gr√°fico de comparaci√≥n de modelos.")
        
        # Mostrar tabla de comparaci√≥n
        if model_comparison is not None:
            st.write("M√©tricas de evaluaci√≥n de modelos:")
            st.dataframe(model_comparison)
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        La comparaci√≥n de modelos muestra el rendimiento de diferentes algoritmos predictivos:
        - **R¬≤**: Coeficiente de determinaci√≥n. Mayor es mejor (m√°ximo 1).
        - **RMSE**: Error cuadr√°tico medio. Menor es mejor.
        - **MAE**: Error absoluto medio. Menor es mejor.
        
        El mejor modelo es aquel que maximiza R¬≤ y minimiza RMSE y MAE.
        """)
    
    with tab2:
        st.subheader("Importancia de Variables")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Mostrar importancia de caracter√≠sticas para regresi√≥n lineal
            lr_importance_path = FIGURES_DIR / 'lr_feature_importance.png'
            if os.path.exists(lr_importance_path):
                st.image(str(lr_importance_path), caption="Importancia de Variables - Regresi√≥n Lineal")
            else:
                st.error("No se encontr√≥ el gr√°fico de importancia para regresi√≥n lineal.")
        
        with col2:
            # Mostrar importancia de caracter√≠sticas para random forest
            rf_importance_path = FIGURES_DIR / 'rf_feature_importance.png'
            if os.path.exists(rf_importance_path):
                st.image(str(rf_importance_path), caption="Importancia de Variables - Random Forest")
            else:
                st.error("No se encontr√≥ el gr√°fico de importancia para Random Forest.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        Los gr√°ficos de importancia de variables muestran qu√© caracter√≠sticas tienen mayor influencia en las predicciones:
        - Las barras representan la importancia relativa de cada variable.
        - Variables con mayor importancia (barras m√°s largas) tienen mayor impacto en la predicci√≥n.
        - La comparaci√≥n entre modelos muestra si diferentes algoritmos utilizan las variables de manera distinta.
        
        Las variables socioecon√≥micas m√°s importantes pueden considerarse como factores claves que influyen en el rendimiento acad√©mico.
        """)
    
    with tab3:
        st.subheader("Predicciones vs. Valores Reales")
        
        # Mostrar predicciones vs reales para regresi√≥n lineal
        lr_pred_path = FIGURES_DIR / 'lr_prediction_vs_actual.png'
        if os.path.exists(lr_pred_path):
            st.image(str(lr_pred_path), caption="Predicciones vs. Valores Reales - Regresi√≥n Lineal")
        else:
            st.error("No se encontr√≥ el gr√°fico de predicciones para regresi√≥n lineal.")
        
        # Mostrar residuos para regresi√≥n lineal
        lr_residuals_path = FIGURES_DIR / 'lr_residuals.png'
        if os.path.exists(lr_residuals_path):
            st.image(str(lr_residuals_path), caption="Residuos - Regresi√≥n Lineal")
        else:
            st.error("No se encontr√≥ el gr√°fico de residuos para regresi√≥n lineal.")
        
        # Mostrar predicciones vs reales para Random Forest
        rf_pred_path = FIGURES_DIR / 'rf_prediction_vs_actual.png'
        if os.path.exists(rf_pred_path):
            st.image(str(rf_pred_path), caption="Predicciones vs. Valores Reales - Random Forest")
        else:
            st.error("No se encontr√≥ el gr√°fico de predicciones para Random Forest.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        Los gr√°ficos de predicciones vs. valores reales muestran cu√°n bien el modelo predice los valores:
        - Puntos cercanos a la l√≠nea diagonal indican predicciones precisas.
        - Puntos por encima de la l√≠nea indican sobreestimaci√≥n.
        - Puntos por debajo de la l√≠nea indican subestimaci√≥n.
        - Un patr√≥n aleatorio alrededor de la l√≠nea sugiere un buen ajuste del modelo.
        
        El gr√°fico de residuos muestra las diferencias entre las predicciones y los valores reales:
        - Un buen modelo debe mostrar residuos distribuidos aleatoriamente alrededor de cero.
        - Patrones claros en los residuos sugieren que el modelo no captura alguna estructura importante en los datos.
        """)

# Funci√≥n para la p√°gina de an√°lisis geoespacial
def show_geospatial():
    """Muestra la p√°gina de an√°lisis geoespacial."""
    st.header("üó∫Ô∏è An√°lisis Geoespacial")
    
    # Verificar si folium est√° disponible
    if not FOLIUM_AVAILABLE:
        st.warning("üó∫Ô∏è Las funcionalidades de mapas interactivos no est√°n disponibles en este entorno.")
        st.info("üí° Los mapas requieren las librer√≠as folium y streamlit-folium.")
        
        # Mostrar solo los gr√°ficos est√°ticos disponibles
        st.subheader("Gr√°ficos de An√°lisis Geoespacial Disponibles")
        
        # Mostrar gr√°fico de rendimiento por departamento si existe
        performance_path = FIGURES_DIR / 'performance_by_department.png'
        if os.path.exists(performance_path):
            st.image(str(performance_path), caption="Rendimiento Acad√©mico por Departamento")
        
        # Mostrar distribuci√≥n de estratos por departamento si existe
        strata_dist_path = FIGURES_DIR / 'strata_by_department.png'
        if os.path.exists(strata_dist_path):
            st.image(str(strata_dist_path), caption="Distribuci√≥n de Estratos por Departamento")
        
        if not os.path.exists(performance_path) and not os.path.exists(strata_dist_path):
            st.info("üìä Para generar gr√°ficos geoespaciales, ejecute primero el an√°lisis completo en un entorno local.")
        
        return
    
    df_geo = load_department_stats()
    if df_geo is None:
        st.warning("No se encontraron resultados geoespaciales. Por favor ejecute primero el an√°lisis completo.")
        return
    
    # Pesta√±as para diferentes aspectos del an√°lisis geoespacial
    tab1, tab2, tab3 = st.tabs(["Mapas de Rendimiento", "Distribuci√≥n por Departamento", "Comparaci√≥n Regional"])
    
    with tab1:
        st.subheader("Mapas de Colombia")
        
        # Seleccionar variable para mapa
        map_options = ["Cantidad de Estudiantes", "Razonamiento Cuantitativo", "Lectura Cr√≠tica", "Estrato"]
        selected_map = st.selectbox("Seleccione el mapa a visualizar:", map_options)
        
        # Mostrar mapa correspondiente
        if selected_map == "Cantidad de Estudiantes":
            map_path = FIGURES_DIR / 'map_cantidad_estudiantes.html'
        elif selected_map == "Razonamiento Cuantitativo":
            map_path = FIGURES_DIR / 'map_razonamiento_cuantitativo.html'
        elif selected_map == "Lectura Cr√≠tica":
            map_path = FIGURES_DIR / 'map_lectura_critica.html'
        else:  # Estrato
            map_path = FIGURES_DIR / 'cluster_map_estrato.html'
        
        # Mostrar el mapa con folium_static
        if os.path.exists(map_path):
            st.components.v1.html(open(map_path, 'r', encoding='utf-8').read(), height=500)
        else:
            st.error(f"No se encontr√≥ el mapa {selected_map}.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        Los mapas coropletas muestran la distribuci√≥n geogr√°fica de diferentes variables:
        - **Cantidad de Estudiantes**: Visualiza el n√∫mero de estudiantes por departamento.
        - **Razonamiento Cuantitativo**: Muestra el puntaje promedio en razonamiento cuantitativo por departamento.
        - **Lectura Cr√≠tica**: Muestra el puntaje promedio en lectura cr√≠tica por departamento.
        - **Estrato**: Visualiza el estrato socioecon√≥mico predominante por departamento.
        
        Los colores m√°s oscuros generalmente indican valores m√°s altos. Esta visualizaci√≥n permite identificar patrones regionales y desigualdades geogr√°ficas.
        """)
    
    with tab2:
        st.subheader("Distribuci√≥n por Departamento")
        
        # Mostrar heatmap de rendimiento por departamento
        heatmap_path = FIGURES_DIR / 'heatmap_rendimiento.html'
        if os.path.exists(heatmap_path):
            st.components.v1.html(open(heatmap_path, 'r', encoding='utf-8').read(), height=500)
        else:
            st.error("No se encontr√≥ el mapa de calor de rendimiento por departamento.")
        
        # Mostrar distribuci√≥n de estratos por departamento
        strata_dist_path = FIGURES_DIR / 'strata_by_department.png'
        if os.path.exists(strata_dist_path):
            st.image(str(strata_dist_path), caption="Distribuci√≥n de Estratos por Departamento")
        else:
            st.error("No se encontr√≥ el gr√°fico de distribuci√≥n de estratos por departamento.")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        El mapa de calor muestra la relaci√≥n entre departamentos y rendimiento acad√©mico:
        - Colores m√°s c√°lidos (rojos) indican mejor rendimiento.
        - Colores m√°s fr√≠os (azules) indican peor rendimiento.
        - Este mapa permite identificar r√°pidamente qu√© departamentos tienen mejor o peor desempe√±o en las diferentes pruebas.
        
        La distribuci√≥n de estratos por departamento muestra la composici√≥n socioecon√≥mica de cada regi√≥n:
        - Las barras apiladas muestran la proporci√≥n de cada estrato dentro de cada departamento.
        - Esto permite identificar desigualdades socioecon√≥micas entre diferentes regiones del pa√≠s.
        """)
    
    with tab3:
        st.subheader("Comparaci√≥n Regional")
        
        # Mostrar gr√°fico de rendimiento por departamento
        performance_path = FIGURES_DIR / 'performance_by_department.png'
        if os.path.exists(performance_path):
            st.image(str(performance_path), caption="Rendimiento Acad√©mico por Departamento")
        else:
            st.error("No se encontr√≥ el gr√°fico de rendimiento por departamento.")
        
        # Mostrar visualizaci√≥n interactiva si los datos est√°n disponibles
        if df_geo is not None and 'DEPARTMENT' in df_geo.columns:
            # Seleccionar variable para visualizar
            columns = [col for col in df_geo.columns if col not in ['DEPARTMENT', 'geometry']]
            
            if columns:
                selected_var = st.selectbox(
                    "Seleccione una variable para comparar entre departamentos:",
                    columns,
                    key="geo_var_select"
                )
                
                # Ordenar por la variable seleccionada
                df_sorted = df_geo.sort_values(by=selected_var)
                
                # Crear gr√°fico de barras
                fig = px.bar(
                    df_sorted, 
                    x='DEPARTMENT',
                    y=selected_var,
                    title=f"{selected_var} por Departamento",
                    color=selected_var,
                    color_continuous_scale='Viridis',
                )
                
                # Actualizar layout para mejor visualizaci√≥n
                fig.update_layout(
                    xaxis_tickangle=-45,
                    xaxis_title="Departamento",
                    yaxis_title=selected_var
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Mostrar estad√≠sticas b√°sicas
                st.subheader(f"Estad√≠sticas de {selected_var}")
                stats = df_geo[selected_var].describe()
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Promedio", f"{stats['mean']:.2f}")
                
                with col2:
                    st.metric("Mediana", f"{stats['50%']:.2f}")
                
                with col3:
                    st.metric("M√≠nimo", f"{stats['min']:.2f}")
                
                with col4:
                    st.metric("M√°ximo", f"{stats['max']:.2f}")
        
        st.markdown("""
        **Interpretaci√≥n:**
        
        Estas visualizaciones permiten comparar el rendimiento acad√©mico entre departamentos:
        - Se puede identificar qu√© departamentos tienen mejor o peor desempe√±o en las pruebas.
        - Se pueden explorar posibles relaciones entre el nivel socioecon√≥mico de los departamentos y su rendimiento acad√©mico.
        - Los departamentos con valores at√≠picos (muy por encima o muy por debajo del promedio) pueden ser objeto de an√°lisis m√°s detallado.
        """)

# Funci√≥n principal para mostrar la secci√≥n seleccionada
def show_selected_section():
    """Muestra la secci√≥n seleccionada en la barra lateral."""
    # Diccionario de p√°ginas disponibles
    pages = {
        "üè† Inicio": show_home,
        "üîç Exploraci√≥n de Datos": show_eda,
        "üß© An√°lisis de Componentes Principales": show_pca,
        "üîÑ An√°lisis de Correspondencias M√∫ltiples": show_mca,
        "üî¨ Clustering Jer√°rquico": show_clustering,
        "üìà Modelos Predictivos": show_predictive_models,
    }
    
    # Agregar an√°lisis geoespacial solo si folium est√° disponible
    if FOLIUM_AVAILABLE:
        pages["üó∫Ô∏è An√°lisis Geoespacial"] = show_geospatial
    else:
        pages["üìä An√°lisis Geoespacial (Solo Gr√°ficos)"] = show_geospatial
    
    # Selecci√≥n de p√°gina
    selection = st.sidebar.radio("Ir a:", list(pages.keys()))
    
    # Ejecutar funci√≥n de la p√°gina seleccionada
    pages[selection]()

# Funci√≥n principal
def main():
    """Funci√≥n principal que controla el flujo del dashboard."""
    # Mostrar encabezado
    show_header()
    
    # Configuraci√≥n del sidebar
    st.sidebar.title("Navegaci√≥n")
    
    # Mostrar secci√≥n seleccionada
    show_selected_section()
    
    # Informaci√≥n adicional en el sidebar
    st.sidebar.markdown("---")
    st.sidebar.info(
        "Este dashboard fue creado para analizar la relaci√≥n entre el nivel socioecon√≥mico "
        "y el rendimiento acad√©mico en las pruebas Saber Pro en Colombia."
    )
    
    # Bot√≥n para ejecutar an√°lisis completo
    st.sidebar.markdown("---")
    st.sidebar.subheader("Ejecutar An√°lisis")
    
    if st.sidebar.button("Ejecutar An√°lisis Completo"):
        st.sidebar.warning("Ejecutando an√°lisis completo. Esto puede tardar varios minutos...")
        
        # Importar y ejecutar an√°lisis
        sys.path.append(str(Path(__file__).resolve().parent.parent))
        from src.main import run_all_analyses
        
        with st.spinner("Ejecutando an√°lisis..."):
            run_all_analyses(force_reload=True)
        
        st.sidebar.success("¬°An√°lisis completado! Actualiza las visualizaciones.")
        st.experimental_rerun()

if __name__ == "__main__":
    main()
