#!/usr/bin/env python3
"""
Script de verificaci√≥n r√°pida del funcionamiento de la aplicaci√≥n.
Ejecuta este script para verificar que todo funciona correctamente.
"""

import sys
import os
from pathlib import Path
import importlib.util

def test_imports():
    """Prueba que todas las importaciones cr√≠ticas funcionen."""
    print("üß™ Probando importaciones cr√≠ticas...")
    
    critical_modules = [
        'pandas',
        'numpy',
        'streamlit',
        'plotly',
        'sklearn',
        'matplotlib',
        'seaborn'
    ]
    
    failed_imports = []
    
    for module in critical_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
            failed_imports.append(module)
    
    return len(failed_imports) == 0

def test_data_loading():
    """Prueba que la carga de datos funcione."""
    print("\nüìä Probando carga de datos...")
    
    try:
        # Agregar el path del proyecto
        sys.path.insert(0, str(Path(__file__).parent))
        
        from src.data.data_loader import load_raw_data
        
        df = load_raw_data()
        
        if df is not None:
            print(f"‚úÖ Datos cargados: {df.shape}")
            print(f"‚úÖ Columnas disponibles: {len(df.columns)}")
            return True
        else:
            print("‚ö†Ô∏è No se pudieron cargar datos reales, pero el sistema puede funcionar con datos de muestra")
            return True
            
    except Exception as e:
        print(f"‚ùå Error en carga de datos: {e}")
        return False

def test_streamlit_app():
    """Verifica que la aplicaci√≥n Streamlit se pueda ejecutar."""
    print("\nüåê Verificando aplicaci√≥n Streamlit...")
    
    app_path = Path(__file__).parent / "dashboard" / "app.py"
    
    if not app_path.exists():
        print(f"‚ùå No se encontr√≥ app.py en {app_path}")
        return False
    
    print(f"‚úÖ Aplicaci√≥n encontrada: {app_path}")
    
    # Verificar que el archivo tenga contenido v√°lido
    try:
        with open(app_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if 'def main()' in content and 'streamlit' in content:
            print("‚úÖ Aplicaci√≥n parece v√°lida")
            return True
        else:
            print("‚ùå Aplicaci√≥n no parece v√°lida")
            return False
            
    except Exception as e:
        print(f"‚ùå Error leyendo aplicaci√≥n: {e}")
        return False

def test_setup_scripts():
    """Verifica que los scripts de configuraci√≥n funcionen."""
    print("\n‚öôÔ∏è Probando scripts de configuraci√≥n...")
    
    scripts = [
        'setup_data.py',
        'streamlit_setup.py'
    ]
    
    for script in scripts:
        script_path = Path(__file__).parent / script
        if script_path.exists():
            print(f"‚úÖ {script} encontrado")
        else:
            print(f"‚ùå {script} no encontrado")

def run_verification():
    """Ejecuta todas las verificaciones."""
    print("üîç VERIFICACI√ìN R√ÅPIDA DEL PROYECTO SABER PRO")
    print("=" * 50)
    
    tests = [
        ("Importaciones", test_imports),
        ("Carga de datos", test_data_loading),
        ("Aplicaci√≥n Streamlit", test_streamlit_app),
        ("Scripts de configuraci√≥n", test_setup_scripts),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        result = test_func()
        results.append((test_name, result))
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE RESULTADOS")
    print("=" * 50)
    
    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ PAS√ì" if passed else "‚ùå FALL√ì"
        print(f"{status} {test_name}")
        if not passed:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("\nPara ejecutar la aplicaci√≥n:")
        print("streamlit run dashboard/app.py")
    else:
        print("‚ö†Ô∏è ALGUNAS VERIFICACIONES FALLARON")
        print("\nRevisa los errores arriba y ejecuta:")
        print("pip install -r requirements.txt")
    
    print("=" * 50)
    
    return all_passed

if __name__ == "__main__":
    success = run_verification()
    sys.exit(0 if success else 1)
